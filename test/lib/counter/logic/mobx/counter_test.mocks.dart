// Mocks generated by Mockito 5.1.0 from annotations
// in test10/test/lib/counter/logic/mobx/counter_test.dart.
// Do not manually edit this file.

import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:test10/counter/logic/mobx/counter.dart' as _i3;
import 'package:test10/counter/repository/counter_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFile_0 extends _i1.Fake implements _i2.File {}

class _FakeCounter_1 extends _i1.Fake implements _i3.Counter {}

/// A class which mocks [CounterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCounterRepository extends _i1.Mock implements _i4.CounterRepository {
  MockCounterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.File get storage => (super.noSuchMethod(Invocation.getter(#storage),
      returnValue: _FakeFile_0()) as _i2.File);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void persist(_i3.Counter? counter) =>
      super.noSuchMethod(Invocation.method(#persist, [counter]),
          returnValueForMissingStub: null);
  @override
  _i3.Counter load() => (super.noSuchMethod(Invocation.method(#load, []),
      returnValue: _FakeCounter_1()) as _i3.Counter);
}
